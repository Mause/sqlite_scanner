# name: test/sql/storage/attach_constraints.test
# description:
# group: [sqlite_storage]

require sqlite_scanner

statement ok
ATTACH '__TEST_DIR__/attach_constraints.db' AS s1 (TYPE SQLITE)

# FIXME:
#statement ok
#PRAGMA enable_verification

# primary keys
statement ok
CREATE TABLE s1.test(i INTEGER PRIMARY KEY);

statement ok
INSERT INTO s1.test VALUES (42);

statement error
INSERT INTO s1.test VALUES (42);
----
UNIQUE constraint

# SQLite accepts NULL values in primary key tables
statement ok
INSERT INTO s1.test VALUES (NULL);

query I
SELECT * FROM s1.test
----
42
NULL

# unique constraint
statement ok
CREATE TABLE s1.test2(i INTEGER UNIQUE);

statement ok
INSERT INTO s1.test2 VALUES (42);

statement error
INSERT INTO s1.test2 VALUES (42);
----
UNIQUE constraint failed

statement ok
INSERT INTO s1.test2 VALUES (NULL);

query I
SELECT * FROM s1.test2
----
42
NULL

# compound primary key/ constraints
statement ok
CREATE TABLE s1.test3(i INTEGER, j INTEGER, PRIMARY KEY(i, j));

statement ok
INSERT INTO s1.test3 VALUES (1, 1);

statement ok
INSERT INTO s1.test3 VALUES (1, 2);

statement error
INSERT INTO s1.test3 VALUES (1, 1);
----
UNIQUE constraint failed

query II
SELECT * FROM s1.test3
----
1	1
1	2

# check constraints
statement ok
CREATE TABLE s1.test4(i INTEGER CHECK(i < 100));

statement ok
INSERT INTO s1.test4 VALUES (42);

statement error
INSERT INTO s1.test4 VALUES (142);
----
CHECK constraint failed

query I
SELECT * FROM s1.test4
----
42

# NOT NULL constraints
statement ok
CREATE TABLE s1.test5(i INTEGER NOT NULL);

statement ok
INSERT INTO s1.test5 VALUES (42);

statement error
INSERT INTO s1.test5 VALUES (NULL);
----
NOT NULL constraint

query I
SELECT * FROM s1.test5
----
42
